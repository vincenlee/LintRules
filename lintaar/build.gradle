apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group='com.github.zuiguangyina'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

/*--------------------------------------旧版的写法----------------------------------------------------------*/
//configurations {
//    lintJarImport
//}
//
//dependencies {
//    lintJarImport project(path: ":LintJat", configuration: "lintJarOutput")
//}
//
//task copyLintJar(type: Copy) {
//    from (configurations.lintJarImport) {
//        rename {
//            String fileName ->
//                'lint.jar'
//        }
//    }
//    into 'build/intermediates/lint/'
//}
//
//project.afterEvaluate {
//    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
//    compileLintTask.dependsOn(copyLintJar)
//}
/*---------------------------旧版的结束---------------------------------------------------------*/

/*---------------------------新版的开始----------------------------------------------------------*/

/** Package the given lint checks library into this AAR  */
/*我们这里暂时先使用旧版的写法*/
dependencies {
    // lintChecks 是系统定义的一个configuration
    lintChecks project(':LintJat')
}
/*------------------------------新版的结束-----------------------------------------------------------*/


/*------------------------------发布aar包-----------------------------------------------------------*/
//apply plugin:'maven'
//////apply plugin: 'maven-publish'
//ext {
//// 从Github上clone下来的项目的本地地址
//    GITHUB_REPO_PATH ="E:\\git\\github\\plugin3\\newLintRule"
//
//    PUBLISH_GROUP_ID ='com.gf.plugin'  //这个不要跟着我写 这是github 的id
//
//    PUBLISH_ARTIFACT_ID ='plugintest'   //这个是刚才在github创建的仓库名字
//
//    PUBLISH_VERSION ='1.0.0'   //版本号
//
//}
//
//uploadArchives {
//    repositories.mavenDeployer {
//        //这是个什么玩意，是添加属性吗
//        //是访问属性
//        def deployPath = file(project.GITHUB_REPO_PATH)
//
//        //先发布到本地，在本地提交到github去
//        repository(url:"file://${deployPath.absolutePath}")
//
//        pom.project {
//
//            groupId project.PUBLISH_GROUP_ID
//
//            artifactId project.PUBLISH_ARTIFACT_ID
//
//            version project.PUBLISH_VERSION
//        }
//    }
//}
//
//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    archiveClassifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}
//
//task androidSourcesJar(type: Jar) {
//    archiveClassifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}
//
//
////解决 JavaDoc 中文注释生成失败的问题
//tasks.withType(Javadoc) {
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}
//
//tasks.withType(JavaCompile){
//    options.encoding = "UTF-8"
//}
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}

/*------------------------------发布aar包的结束-----------------------------------------------------------*/







































